{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "AWS CloudFormation - Spring 2020",
    "Parameters" : {
        "VPCCIDR" : { "Type": "String"},
        "MyVPCName" : { "Type": "String"},
        "AZ1" : { "Type": "AWS::EC2::AvailabilityZone::Name"},
        "AZ2" : { "Type": "AWS::EC2::AvailabilityZone::Name"},
        "AZ3" : { "Type": "AWS::EC2::AvailabilityZone::Name"},
        "Subnet1CIDR" : { "Type": "String"},
        "Subnet2CIDR" : { "Type": "String"},
        "Subnet3CIDR" : { "Type": "String"},
        "AMIID" : { "Type": "String"},
        "RDSInstanceClass" : { "Type": "String"},
        "RDSAllocatedStorage" : { "Type": "String"},
        "KeyName" : { "Type": "String"},
        "RDSMasterUser" : { "Type": "String"},
        "RDSMasterPass" : { "Type": "String"},
        "RDSPubliclyAccessible" : { "Type": "String"},
        "RDSInstanceId" : { "Type": "String"},
        "ECInstanceType" : { "Type": "String"},
        "RDSDBName" : { "Type": "String"},
        "ECIVolumeSize" : { "Type": "String"},
        "CodeDeployS3Bucket" : { "Type": "String"}
    },
    "Resources" : {
        "myVPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock" : { "Ref" : "VPCCIDR"},
                "EnableDnsSupport" : true,
                "EnableDnsHostnames" : true,
                "InstanceTenancy" : "default",
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : { "Ref" : "MyVPCName"}
                    }
                ]
            }
        },
        "mySubnet1" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Ref" : "AZ1"},
                "CidrBlock" : { "Ref" : "Subnet1CIDR"},
                "MapPublicIpOnLaunch": true,
                "VpcId" : { "Ref" : "myVPC"},
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : {"Fn::Join":["_",[{"Ref" : "MyVPCName"},"Subnet1"]]}
                    }
                ]
            }
        },
        "mySubnet2" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Ref" : "AZ2"},
                "CidrBlock" : { "Ref" : "Subnet2CIDR"},
                "MapPublicIpOnLaunch": true,
                "VpcId" : { "Ref" : "myVPC"},
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : {"Fn::Join":["_",[{"Ref" : "MyVPCName"},"Subnet2"]]}
                    }
                ]
            }
        },
        "mySubnet3" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Ref" : "AZ3"},
                "CidrBlock" : { "Ref" : "Subnet3CIDR"},
                "MapPublicIpOnLaunch": true,
                "VpcId" : { "Ref" : "myVPC"},
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : {"Fn::Join":["_",[{"Ref" : "MyVPCName"},"Subnet3"]]}
                    }
                ]
            }
        },
        "myInternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : {"Fn::Join":["_",[{"Ref" : "MyVPCName"},"InternetGateway"]]}
                    }
                ]
            }
        },
        "attachMyInternetGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "InternetGatewayId" : { "Ref" : "myInternetGateway"},
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "myPublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "myVPC"},
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : {"Fn::Join":["_",[{"Ref" : "MyVPCName"},"PublicRouteTable"]]}
                    }
                ]
            }
        },
        "mySubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : { "Ref" : "myPublicRouteTable"},
                "SubnetId" : {"Ref" : "mySubnet1"}
            }
        },
        "mySubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : { "Ref" : "myPublicRouteTable"},
                "SubnetId" : {"Ref" : "mySubnet2"}
            }
        },
        "mySubnet3RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : { "Ref" : "myPublicRouteTable"},
                "SubnetId" : {"Ref" : "mySubnet3"}                            
            }
        },
        "myPublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "myInternetGateway"},
                "RouteTableId" : { "Ref" : "myPublicRouteTable"}
            }
        },
        "S3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "AccessControl": "Private",
                "PublicAccessBlockConfiguration" : {
                    "BlockPublicAcls" : true,
                    "BlockPublicPolicy" : true,
                    "IgnorePublicAcls" : true,
                    "RestrictPublicBuckets" : true
                },
                "BucketEncryption" : {
                    "ServerSideEncryptionConfiguration": [{
                        "ServerSideEncryptionByDefault": {
                          "SSEAlgorithm": "AES256"
                        }
                      }]
                },
                "LifecycleConfiguration" : {
                    "Rules" : [
                        {
                            "Id": "StandardIARule",
                            "Prefix": "standardia",
                            "Status": "Enabled",
                            "Transitions": [
                                {
                                  "TransitionInDays": "30",
                                  "StorageClass": "STANDARD_IA"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "CodeDeployEC2S3IAMPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "CodeDeploy-EC2-S3",
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {"Fn::Join":["",["arn:aws:s3:::", { "Ref" : "CodeDeployS3Bucket"}]]},
                                {"Fn::Join":["",["arn:aws:s3:::", { "Ref" : "CodeDeployS3Bucket"},"/*"]]}
                            ]
                        },
                        {
                            "Action": [
                                "s3:DeleteObject",
                                "s3:ListBucket",
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {"Fn::Join":["",["arn:aws:s3:::", { "Ref" : "S3Bucket"}]]},
                                {"Fn::Join":["",["arn:aws:s3:::", { "Ref" : "S3Bucket"},"/*"]]}
                            ]
                        }
                    ]
                },
                "Roles" : [{"Ref" : "CodeDeployEC2ServiceRole"}]
            },
            "DependsOn" : [
                "S3Bucket"
            ]
        },
        "CircleCIUploadToS3" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "ManagedPolicyName" : "CircleCI-Upload-To-S3",
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {"Fn::Join":["",["arn:aws:s3:::", { "Ref" : "CodeDeployS3Bucket"}]]},
                                {"Fn::Join":["",["arn:aws:s3:::", { "Ref" : "CodeDeployS3Bucket"},"/*"]]}
                            ]
                        }
                    ]
                },
                "Users" : ["circleci"]
            }
        },
        "CircleCICodeDeploy" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "ManagedPolicyName" : "CircleCI-Code-Deploy",
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:RegisterApplicationRevision",
                                "codedeploy:GetApplicationRevision"
                            ],
                              "Resource": [
                                {"Fn::Join":[":",["arn:aws:codedeploy", { "Ref" : "AWS::Region"},{ "Ref" : "AWS::AccountId"},"application","csye6225-webapp"]]}
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetDeployment"
                            ],
                              "Resource": [
                                "*"
                            ] 
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:GetDeploymentConfig"
                            ],
                              "Resource": [
                                {"Fn::Join":[":",["arn:aws:codedeploy", { "Ref" : "AWS::Region"},{ "Ref" : "AWS::AccountId"},"deploymentconfig:CodeDeployDefault.OneAtATime"]]},
                                {"Fn::Join":[":",["arn:aws:codedeploy", { "Ref" : "AWS::Region"},{ "Ref" : "AWS::AccountId"},"deploymentconfig:CodeDeployDefault.HalfAtATime"]]},
                                {"Fn::Join":[":",["arn:aws:codedeploy", { "Ref" : "AWS::Region"},{ "Ref" : "AWS::AccountId"},"deploymentconfig:CodeDeployDefault.AllAtOnce"]]}
                            ] 
                        }
                    ]
                },
                "Users" : ["circleci"]
            },
            "DependsOn" : ["CodeDeployApplication", "CodeDeploymentGroup"]
        },
        "CircleCIEC2AMIPolicy" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "ManagedPolicyName" : "circleci-ec2-ami",
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action" : [
                          "ec2:AttachVolume",
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:CopyImage",
                          "ec2:CreateImage",
                          "ec2:CreateKeypair",
                          "ec2:CreateSecurityGroup",
                          "ec2:CreateSnapshot",
                          "ec2:CreateTags",
                          "ec2:CreateVolume",
                          "ec2:DeleteKeyPair",
                          "ec2:DeleteSecurityGroup",
                          "ec2:DeleteSnapshot",
                          "ec2:DeleteVolume",
                          "ec2:DeregisterImage",
                          "ec2:DescribeImageAttribute",
                          "ec2:DescribeImages",
                          "ec2:DescribeInstances",
                          "ec2:DescribeInstanceStatus",
                          "ec2:DescribeRegions",
                          "ec2:DescribeSecurityGroups",
                          "ec2:DescribeSnapshots",
                          "ec2:DescribeSubnets",
                          "ec2:DescribeTags",
                          "ec2:DescribeVolumes",
                          "ec2:DetachVolume",
                          "ec2:GetPasswordData",
                          "ec2:ModifyImageAttribute",
                          "ec2:ModifyInstanceAttribute",
                          "ec2:ModifySnapshotAttribute",
                          "ec2:RegisterImage",
                          "ec2:RunInstances",
                          "ec2:StopInstances",
                          "ec2:TerminateInstances"
                        ],
                        "Resource" : "*"
                    }]
                },
                "Users" : ["circleci"]
            }
        },
        "CodeDeployEC2ServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "ManagedPolicyArns": ["arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "RoleName" : "CodeDeployEC2ServiceRole"
            }
        },
        "CodeDeployServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codedeploy.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "RoleName" : "CodeDeployServiceRole"
            }
        },
        "EC2SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Security Group for EC2 Instance",
                "GroupName" : "application",
                "VpcId" : {"Ref" : "myVPC"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : 22,
                    "ToPort" : 22,
                    "SourceSecurityGroupId" : {
                        "Fn::GetAtt": [
                        "LoadBalancerSecurityGroup",
                        "GroupId"
                    ]}
                },{
                    "IpProtocol" : "tcp",
                    "FromPort" : 80,
                    "ToPort" : 80,
                    "SourceSecurityGroupId" : {
                        "Fn::GetAtt": [
                        "LoadBalancerSecurityGroup",
                        "GroupId"
                    ]}
                },{
                    "IpProtocol" : "tcp",
                    "FromPort" : 443,
                    "ToPort" : 443,
                    "SourceSecurityGroupId" : {
                        "Fn::GetAtt": [
                        "LoadBalancerSecurityGroup",
                        "GroupId"
                    ]}
                },{
                    "IpProtocol" : "tcp",
                    "FromPort" : 3000,
                    "ToPort" : 3000,
                    "SourceSecurityGroupId" : {
                        "Fn::GetAtt": [
                        "LoadBalancerSecurityGroup",
                        "GroupId"
                    ]}
                }],
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "application"
                    }
                ]
            }
        },
        "EC2DatabaseSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Security Group for Database",
                "GroupName" : "database",
                "VpcId" : {"Ref" : "myVPC"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : 3306,
                    "ToPort" : 3306,
                    "SourceSecurityGroupId" : {
                        "Fn::GetAtt": [
                        "EC2SecurityGroup",
                        "GroupId"
                    ]}
                }],
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "database"
                    }
                ]
            },
            "DependsOn" : [
                "EC2SecurityGroup"
            ]
        },
        "RDSSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : "Subnet for RDS Instance",
                "SubnetIds" : [{"Ref" : "mySubnet1"},{"Ref" : "mySubnet2"},{"Ref" : "mySubnet3"}]
            }
        },
        "RDSInstance" : {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "Engine" : "MySQL",
                "DBInstanceClass" : {"Ref" : "RDSInstanceClass"},
                "MultiAZ" : "false",
                "DBInstanceIdentifier" : {"Ref" : "RDSInstanceId"},
                "MasterUsername" : {"Ref" : "RDSMasterUser"},
                "MasterUserPassword" : {"Ref" : "RDSMasterPass"},
                "PubliclyAccessible" : {"Ref" : "RDSPubliclyAccessible"},
                "DBName" : {"Ref" : "RDSDBName"},
                "Port" : "3306",
                "VPCSecurityGroups" : [{"Ref" : "EC2DatabaseSecurityGroup"}],
                "EngineVersion" : "5.7.28",
                "AllocatedStorage" : {"Ref" : "RDSAllocatedStorage"},
                "StorageType" : "gp2",
                "DBSubnetGroupName" : {"Ref" : "RDSSubnetGroup"},
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "webapp-csye6225-spring2020-rds"
                    }
                ]
            }
        },
        "EC2IAMRoleInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Roles" : [{"Ref" : "CodeDeployEC2ServiceRole"}]   
            }
        },
        "EC2Instance" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "ImageId" : {"Ref" : "AMIID"},
                "InstanceType" : {"Ref" : "ECInstanceType"},
                "KeyName" : {"Ref" : "KeyName"},
                "AssociatePublicIpAddress" : true,
                "LaunchConfigurationName" : "asg_launch_config",
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "echo DB_HOST=\"", { "Fn::GetAtt" : [ "RDSInstance", "Endpoint.Address" ] }, "\"", " >> /var/.env", "\n",
                    "echo DB_PORT=\"", { "Fn::GetAtt" : [ "RDSInstance", "Endpoint.Port" ] }, "\"", " >> /var/.env", "\n",
                    "echo DB_USER=\"", { "Ref" : "RDSMasterUser"}, "\"", " >> /var/.env", "\n",
                    "echo DB_PASSWORD=\"", { "Ref" : "RDSMasterPass"}, "\"", " >> /var/.env", "\n",
                    "echo S3_BUCKET=\"", { "Ref": "S3Bucket" }, "\"", " >> /var/.env", "\n"
                ]]}},
                "IamInstanceProfile" : {"Ref" : "EC2IAMRoleInstanceProfile"},
                "SecurityGroups" : [{"Ref" : "EC2SecurityGroup"}]
            },
            "DependsOn" : ["EC2SecurityGroup", "RDSInstance"]
        },
        "CodeDeployApplication" : {
            "Type" : "AWS::CodeDeploy::Application",
            "Properties" : {
                "ApplicationName" : "csye6225-webapp",
                "ComputePlatform" : "Server"
            }
        },
        "CodeDeploymentGroup" : {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "DeploymentGroupName" : "csye6225-webapp-deployment",
                "ApplicationName" : {"Ref" : "CodeDeployApplication"},
                "AutoScalingGroups" : [{"Ref" : "AutoScalingGroup"}],
                "ServiceRoleArn" : {
                    "Fn::GetAtt": [
                        "CodeDeployServiceRole",
                        "Arn"
                    ]
                },
                "DeploymentStyle" : {
                    "DeploymentOption" : "WITHOUT_TRAFFIC_CONTROL",
                    "DeploymentType" : "IN_PLACE"
                },
                "Ec2TagFilters": [{
                    "Key" : "Name",
                    "Value" : "webapp-csye6225-spring2020-ec2",
                    "Type" : "KEY_AND_VALUE"
                }],
                "DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
                "AutoRollbackConfiguration": {
                    "Enabled": "true",
                    "Events": [ "DEPLOYMENT_FAILURE" ]
                },
                "LoadBalancerInfo": {
                    "TargetGroupInfoList" : [{
                        "Name" : {"Fn::GetAtt": ["TargetGroup", "TargetGroupName"]}
                    }]
                }
            },
            "DependsOn" : "EC2Instance"
        },
        "AutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AutoScalingGroupName" : "AutoScalingGroup",
                "Cooldown" : "60",
                "LaunchConfigurationName" : {"Ref" : "EC2Instance"},
                "MinSize" : "2",
                "MaxSize" : "5",
                "DesiredCapacity" : "2",
                "TargetGroupARNs" : [{"Ref" : "TargetGroup"}],
                "VPCZoneIdentifier" : [{"Ref" : "mySubnet1"}, {"Ref" : "mySubnet2"}],
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "webapp-csye6225-spring2020-ec2",
                        "PropagateAtLaunch" : true
                    }
                ]
            },
            "DependsOn" : ["EC2Instance"]
        },
        "WebServerScaleUpPolicy": {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {"Ref" : "AutoScalingGroup"},
                "Cooldown": "60",
                "ScalingAdjustment": 1
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {"Ref" : "AutoScalingGroup"},
                "Cooldown": "60",
                "ScalingAdjustment": -1
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 90% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 90,
                "AlarmActions": [{"Ref" : "WebServerScaleUpPolicy"}],
                "Dimensions": [{
                    "Name" : "AutoScalingGroupName",
                    "Value": {"Ref" : "AutoScalingGroup"}
                }],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 70% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 70,
                "AlarmActions": [{"Ref" : "WebServerScaleDownPolicy"}],
                "Dimensions": [{
                    "Name" : "AutoScalingGroupName",
                    "Value": {"Ref" : "AutoScalingGroup"}
                }],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "LoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Name" : "LoadBalancer",
                "Scheme" : "internet-facing",
                "Type" : "application",
                "SecurityGroups" : [{"Ref" : "LoadBalancerSecurityGroup"}],
                "Subnets" : [{"Ref" : "mySubnet1"}, {"Ref" : "mySubnet2"}, {"Ref" : "mySubnet3"}]
            }
        },
        "LoadBalancerListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [{
                    "Type" : "forward",
                    "TargetGroupArn" : {"Ref" : "TargetGroup"}
                }],
                "LoadBalancerArn" : {"Ref" : "LoadBalancer"},
                "Port" : "3000",
                "Protocol" : "HTTP"
            }
        },
        "TargetGroup" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "HealthCheckPath": "/",
                "Name": "TargetGroup",
                "Port": 3000,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId" : { "Ref" : "myVPC"}
            },
            "DependsOn": ["LoadBalancer"]
        },
        "LoadBalancerSecurityGroup" : {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupName": "LoadBalancerSecurityGroup",
                "GroupDescription": "Group for Load Balancer",
                "VpcId" : {"Ref" : "myVPC"},
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : 80,
                        "ToPort" : 80,
                        "CidrIp" : "0.0.0.0/0"
                    },{
                        "IpProtocol" : "tcp",
                        "FromPort" : 443,
                        "ToPort" : 443,
                        "CidrIp" : "0.0.0.0/0" 
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : 3000,
                        "ToPort" : 3000,
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "myDNS" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "AliasTarget" : {
                    "HostedZoneId" : { "Fn::GetAtt" : ["LoadBalancer", "CanonicalHostedZoneID"] },
                    "DNSName" : { "Fn::GetAtt" : ["LoadBalancer","DNSName"] }
                },
                "Name" : "dev.vishakavarma.com.",
                "HostedZoneName" : "dev.vishakavarma.com.",
                "Type" : "A"
            }
        }
    }
}

